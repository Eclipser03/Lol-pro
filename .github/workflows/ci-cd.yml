name: Django CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'  # Укажите версию Python

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Ruff
        run: |
          ruff check


  test:
    needs: lint
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: django
          POSTGRES_PASSWORD: django
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379


    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'  # Укажите версию Python

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env file
        run: |
          echo "${{ secrets.ENV }}" > .env

      - name: Run Tests
        run: |
          cd .
          python3 manage.py test .

  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to server
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SERVER: ${{ secrets.SERVER }}
          USER: ${{ secrets.USER }}
        run: |
          echo "$SSH_KEY" > deploy_key
          chmod 600 deploy_key
          ssh -o StrictHostKeyChecking=no -i deploy_key $USER@$SERVER << EOF
            cd /root/Lol-pro
            git pull origin main
            source /root/Lol-pro/venv/bin/activate
            pip install -r requirements.txt
            python manage.py migrate
            systemctl reboot
          EOF
  notify:
    runs-on: ubuntu-latest
    needs: [lint, test, deploy]
    if: success() || failure()  # Это условие будет проверять успех или неудачу выполнения

    steps:
      - name: Notify via Telegram
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            STATUS="CI/CD pipeline success"
          else
            STATUS="CI/CD pipeline failed"
          fi

          # Отправка сообщения в Telegram
          curl -X GET \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="$STATUS"
